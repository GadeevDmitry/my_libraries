/** @file */
#ifndef LOG_STATIC_H
#define LOG_STATIC_H

#include <stdio.h>
#include <stdlib.h>
#include <stdarg.h>
#include <assert.h>

//--------------------------------------------------------------------------------------------------------------------------------
// LOG: LOCAL SETTINGS
//--------------------------------------------------------------------------------------------------------------------------------

#define LOG_NDEBUG
#define LOG_NVERIFY
#define NDEBUG

//--------------------------------------------------------------------------------------------------------------------------------
#include "log.h"

#ifndef LOG_NTRACE
#include "trace/trace.h"
#endif

//================================================================================================================================
// FUNCTION DECLARATION
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// OPEN-CLOSE
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Открывает и настраивает лог файл
*
*   @return 0, если не удалось открыть лог файл, 1 иначе
*/
static int LOG_STREAM_OPEN();

/**
*   @brief Закрывает лог файл
*
*   @note Вызвана с помощью atexit() в LOG_STREAM_OPEN()
*
*   @see LOG_STREAM_OPEN()
*/
static void LOG_STREAM_CLOSE();

//--------------------------------------------------------------------------------------------------------------------------------
// log_print
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Выводит LOG_TAB табов в лог файл
*
*   @see LOG_TAB
*/
static void log_tab();

/**
*   @brief Выводит содержимое буфера в лог, вставляя табы перед каждой новой строкой
*
*   @param log_buff [in] - буфер для вывода
*   @param is_tab   [in] - равна true, если перед первой строкой необходимы табы
*/
static void log_print(const char *log_buff, bool is_tab);

//--------------------------------------------------------------------------------------------------------------------------------
// LOG_OUTPUT
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Выводит сообщение в лог, используя vsprintf.
*   Не выводит табы перед первой строкой.
*
*   @param fmt [in] - формат вывода
*   @param ap  [in] - переменный список аргументов
*/
static inline void _log_message(const char *fmt, va_list ap);

/**
*   @brief Выоводит сообщение в лог, используя vsprintf.
*   Выводит табы перед первой строкой.
*
*   @param fmt [in] - формат вывода
*   @param ap  [in] - переменный список аргументов
*/
static inline void _log_tab_message(const char *fmt, va_list ap);

//================================================================================================================================
// GLOBAL
//================================================================================================================================

#define LOG_FILE "log.html"                              ///< имя лог файла
size_t  LOG_TAB = 0;                                     ///< количество табов, необходимое отступить перед записью в лог

static FILE  *LOG_STREAM            = nullptr;           ///< лог файл
static int   _OPEN_CLOSE_LOG_STREAM = LOG_STREAM_OPEN(); ///< равна 0, если не удалось открыть лог файл, равна 1 иначе

static int    DYNAMIC_MEMORY        = 0;                 ///< счётчик указателей на динамическую память
static size_t LOG_BUFF_SIZE         = 100000;            ///< максимальное количество символов, которое можно вывести за один запрос log_message()

#ifndef LOG_NTRACE
static trace        TRACE           = {};                ///< для back trace
static bool      IS_TRACE_VALID     = true;              ///< равна true, если стек валидный, false иначе
#endif

#endif //LOG_STATIC_H