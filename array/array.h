/** @file */
#ifndef ARRAY_H
#define ARRAY_H

#include <stdlib.h>
#include <string.h>
#include <assert.h>

#include "../logs/log.h"
#include "../algorithm/algorithm.h"

//================================================================================================================================
// STRUCT
//================================================================================================================================

/**
*   @brief Структура данных массив.
*/
struct array
{
    void     *data; ///< указатель на начало массива
    size_t    size; ///< размер массива
    size_t el_size; ///< размер элемента массива

    void (*el_dtor) (      void *const el); ///< указатель на dtor элемента массива
    void (*el_dump) (const void *const el); ///< указатель на dump элемента массива
};

//================================================================================================================================
// MACRO
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// array verify
//--------------------------------------------------------------------------------------------------------------------------------

#if !defined(NVERIFY) && !defined(ARRAY_NVERIFY)
#define arr_verify(arr, ret_val)                \
    if (_array_verify(arr) != 0)                \
    {                                           \
    $o  return ret_val;                         \
    }
#else
#define arr_verify(arr, ret_val)
#endif

#if !defined(NDEBUG) && !defined(ARRAY_NDEBUG)
#define arr_debug_verify(arr)                   \
    log_assert(_array_verify(arr) == 0)
#else
#define arr_debug_verify(arr)
#endif

//================================================================================================================================
// FUNCTION DECLARATION
//================================================================================================================================

#define $data       (arr->data)
#define $size       (arr->size)
#define $el_size    (arr->el_size)

#define $el_dtor    (arr->el_dtor)
#define $el_dump    (arr->el_dump)

//--------------------------------------------------------------------------------------------------------------------------------
// array verify
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Верификатор массива.
*
*   @return битовая маска кодов ошибок из enum ARR_STATUS
*
*   @see enum ARR_STATUS
*/
unsigned _array_verify(const array *const arr);

//--------------------------------------------------------------------------------------------------------------------------------
// ctor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Array_ctor.
*
*   @param arr     [out] - указатель на массив
*   @param size    [in]  - размер массива
*   @param el_size [in]  - размер элемента массива
*   @param el_dtor [in]  - указатель на dtor элемента массива
*   @param el_dump [in]  - указатель на dump элемента массива
*/
bool array_ctor(array *const arr, const size_t size, const size_t el_size, void (*el_dtor) (      void *const el) = nullptr,
                                                                           void (*el_dump) (const void *const el) = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Создает массив в динамической памяти.
*
*   @param arr     [out] - указатель на массив
*   @param size    [in]  - размер массива
*   @param el_size [in]  - размер элемента массива
*   @param el_dtor [in]  - указатель на dtor элемента массива
*   @param el_dump [in]  - указатель на dump элемента массива
*
*   @return указатель на созданный массив или nullptr в случае ошибки
*/
array *array_new(const size_t size, const size_t el_size, void (*el_dtor) (      void *const el) = nullptr,
                                                          void (*el_dump) (const void *const el) = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------
// dtor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Array_dtor.
*
*   @param _arr [in] - указатель на массив
*/
void array_dtor(void *const _arr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Вызывает array_dtor(void* _arr) и освобождает динамическую память, на которую должен указывать _arr.
*
*   @see array_dtor(void* _arr)
*/
void array_free(void *const _arr);

//--------------------------------------------------------------------------------------------------------------------------------
// init
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Инициализирует все ячейки массива заданным значением.
*
*   @param arr       [in, out] - указатель на массив
*   @param init_elem [in]      - указатель на значение для инициализации
*/
bool array_init(array *const arr, const void *const init_elem);

//--------------------------------------------------------------------------------------------------------------------------------
// set, get
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Устанавливает ячейку массива заданным значением.
*
*   @param arr   [in, out] - указатель на массив
*   @param index [in]      - индекс ячейки
*   @param elem  [in]      - указатель на значение для установки
*/
static inline bool array_set(array *const arr, const size_t index, const void *const elem);
static inline bool array_set(array *const arr, const size_t index, const void *const elem)
{
$i
$   arr_verify(arr            , false);
    log_verify(index < $size  , false);
    log_verify(elem != nullptr, false);

$   memcpy((char *) $data + index * $el_size, elem, $el_size);

$o  return true;
}

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Возвращает указатель на ячейку массива.
*
*   @param arr   [in] - указатель на массив
*   @param index [in] - индекс ячейки
*/
static inline void *array_get(const array *const arr, const size_t index);
static inline void *array_get(const array *const arr, const size_t index)
{
$i
$   arr_verify(arr          , nullptr);
    log_verify(index < $size, nullptr);

$o  return (char *) $data + index * $el_size;
}

//--------------------------------------------------------------------------------------------------------------------------------
// begin, end
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Возвращает указатель на начало массива - его первый элемент.
*/
static inline void *array_begin(const array *const arr);
static inline void *array_begin(const array *const arr)
{
$i
$   arr_verify(arr, nullptr);

$o  return $data;
}

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Возвращает указатель на конец массива - элемент, следующий за последним.
*/
static inline void *array_end(const array *const arr);
static inline void *array_end(const array *const arr)
{
$i
$   arr_verify(arr, nullptr);

$o  return (char *) $data + $size * $el_size;
}

//--------------------------------------------------------------------------------------------------------------------------------
// dump
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Array_dump.
*
*   @param _arr [in] - указатель на массив
*/
void array_dump(const void *const _arr);

//--------------------------------------------------------------------------------------------------------------------------------

#undef $data
#undef $size
#undef $el_size

#undef $el_dtor
#undef $el_dump

#endif //ARRAY_H
