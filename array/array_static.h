/** @file */
#ifndef ARRAY_STATIC_H
#define ARRAY_STATIC_H

#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include <string.h>

#include "array_settings.h"
#include "array.h"

//================================================================================================================================
// DSL
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// ARRAY
//--------------------------------------------------------------------------------------------------------------------------------

#define $data       (arr->data)
#define $size       (arr->size)
#define $el_size    (arr->el_size)

#define $el_dtor    (arr->el_dtor)
#define $el_dump    (arr->el_dump)

//================================================================================================================================
// GLOBAL
//================================================================================================================================

/**
*   @brief Типы ошибок в массиве
*/
enum ARR_STATUS
{
    ARR_OK                  ,
    ARR_NULLPTR             ,

    ARR_NULLPTR_DATA        ,
    ARR_ZERO_SIZE           ,
    ARR_ZERO_EL_SIZE        ,

    ARR_POISON_DATA         ,
    ARR_POISON_SIZE         ,
    ARR_POISON_EL_SIZE      ,
    ARR_POISON_EL_DTOR      ,
    ARR_POISON_EL_DUMP      ,
};

/**
*   @brief Сообщения для каждого типа ошибок
*
*   @see enum ARR_STATUS
*/
const char *ARR_STATUS_MESSAGES[] =
{
    "array is ok"                   ,
    "array is nullptr"              ,

    "array.data is nullptr"         ,
    "array.size is zero"            ,
    "array.el_size is zero"         ,

    "array.data is invalid"         ,
    "array.size is invalid"         ,
    "array.el_size is invalid"      ,
    "array.el_dtor is invalid"      ,
    "array.el_dump is invalid"      ,
};

/**
*   @brief POISON-значения полей массива
*/
static const array ARR_POISON
{
    (void *)    0xABADF00D  ,   //    data
                0xBADCAB1E  ,   //    size
                0xABADBABE  ,   // el_size

    (void (*) (      void *const)) 0xFEEDFACE   , // el_dtor
    (void (*) (const void *const)) 0xDEADDEAD   , // el_dump

};

//================================================================================================================================
// FUNCTION DECLARATION
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// array verify
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Выводит сообщения об ошибках в массиве по битовой маске ошибок. Полный дамп массива.
*/
static void array_log_error(const array *const arr, const unsigned err);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Проверяет на наличие POISON-полей в массиве.
*
*   @return битовая маска кодов ошибок из enum ARR_STATUS
*
*   @see enum ARR_STATUS
*/
static unsigned array_poison_verify(const array *const arr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Верификатор полей массива.
*
*   @return битовая маска кодов ошибок из enum ARR_STATUS
*
*   @see enum ARR_STATUS
*/
static unsigned array_fields_verify(const array *const arr);

//--------------------------------------------------------------------------------------------------------------------------------
// dtor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Dtor содержимого массива.
*/
static void array_data_dtor(array *const arr);

//--------------------------------------------------------------------------------------------------------------------------------
// dump
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп массива.
*
*   @param фкк     [in] - указатель на массив
*   @param is_full [in] - true, если нужен дамп "static" полей
*/
static void array_static_dump(const array *const arr, const bool is_full);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief "Шапка" дампа массива.
*
*   @return true, если arr != nullptr
*/
static bool array_header_dump(const array *const arr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп "public" полей массива.
*
*   @return true, если хоть одно поле невалидно
*/
static bool array_public_fields_dump(const array *const arr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп "static" полей массива.
*
*   @return true, если хоть одно поле невалидно
*/
static bool array_static_fields_dump(const array *const arr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп содержимого массива.
*
*   @param are_invalid_fields [in] - true, если хоть одно поле невалидно
*/
static void array_data_dump(const array *const arr, const bool are_invalid_fields);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп содержимого массива.
*   Гарантируется, что невалидных полей нет, .el_dump != nullptr.
*/
static void array_data_content_dump(const array *const arr);

#endif //ARRAY_STATIC_H
