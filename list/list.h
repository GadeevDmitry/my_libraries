/** @file */
#ifndef LIST_H
#define LIST_H

#include <stdlib.h>

#include "../logs/log.h"
#include "../algorithm/algorithm.h"

//================================================================================================================================
// STRUCT
//================================================================================================================================

/**
*   @brief Вершина листа.
*/
struct list_node
{
    list_node  *prev;    ///< указатель на предыдущую вершину листа
    list_node  *next;    ///< указатель на следующую вершину листа
};

/**
*   @brief Структура данных лист.
*/
struct list
{
    list_node *fictional;                   ///< указатель на фиктивную вершину листа

    size_t    size;                         ///< количество элементов в листе
    size_t el_size;                         ///< размер элемента листа

    void (*el_dtor) (      void *const);    ///< указатель на dtor элемента листа
    void (*el_dump) (const void *const);    ///< указатель на dump элемента листа
};

//================================================================================================================================
// FUNCTION DECLARATION
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// list verify
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Верификатор листа.
*
*   @return битовая маска кодов ошибок из enum LST_STATUS
*
*   @see enum LST_STATUS
*/
unsigned _list_verify(const list *const lst);

//--------------------------------------------------------------------------------------------------------------------------------
// ctor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief List_ctor.
*
*   @param lst     [out] - указатель на лист
*   @param el_size [in]  - размер элемента листа (в байтах)
*   @param el_dtor [in]  - указатель на dtor элемента листа
*   @param el_dump [in]  - указатель на dump элемента листа
*/
bool list_ctor(list *const lst, const size_t el_size, void (*el_dtor) (      void *const) = nullptr,
                                                      void (*el_dump) (const void *const) = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Создает лист в динамической памяти.
*
*   @param el_size [in] - размер элемента листа (в байтах)
*   @param el_dtor [in] - указатель на dtor элемента листа
*   @param el_dump [in] - указатель на dump элемента листа
*
*   @return указатель на созданный лист или nullptr в случае ошибки
*/
list *list_new(const size_t el_size, void (*el_dtor) (      void *const) = nullptr,
                                     void (*el_dump) (const void *const) = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------
// dtor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief List_dtor.
*
*   @param _lst [in] - указатель на лист
*/
void list_dtor(void *const _lst);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Вызывает list_dtor(void* _lst) и освобождает динамическую память, на которую должен указывать лист.
*
*   @see list_dtor(void* _lst)
*/
void list_free(void *const _lst);

//--------------------------------------------------------------------------------------------------------------------------------
// insert erase
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Добавляет элемент в лист.
*
*   @param lst   [in, out] - указатель на лист
*   @param data  [in]      - указатель на элемент
*   @param index [in]      - порядковый номер, на который поставить элемент
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_insert(list *const lst, const void *const data, const size_t index);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Добавляет элемент в начало листа.
*
*   @param lst  [in, out] - указатель на лист
*   @param data [in]      - указатель на элемент
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_push_front(list *const lst, const void *const data);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Добавляет элемент в конец листа.
*
*   @param lst  [in, out] - указатель на лист
*   @param data [in]      - указатель на элемент
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_push_back(list *const lst, const void *const data);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Удаляет элемент из листа.
*
*   @param lst     [in, out] - указатель на лист
*   @param pos         [in]  - порядковый номер удаляемого элемента
*   @param erased_data [out] - указатель, по которому скопировать содержимое удаляемой вершины (nullptr по умолчанию)
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_erase(list *const lst, const size_t pos, void *const erased_data = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Удаляет элемент из листа.
*
*   @param lst [in, out] - указатель на лист
*   @param target   [in] - указатель на элемент, который нужно удалить
*   @param elem_cmp [in] - указатель на функцию сравнения элементов, которая возвращает 0, если элементы равны
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_erase(list *const lst, const void *const target, int (*el_cmp)(const void *el_1, const void *el_2),
                void *const erased_data = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Удаляет элемент из начала листа.
*
*   @param lst     [in, out] - указатель на лист
*   @param erased_data [out] - указатель, по которому скопировать содержимое удаляемой вершины (nullptr по умолчанию)
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_pop_front(list *const lst, void *const erased_data = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Удаляет элемент из конца листа.
*
*   @param lst     [in, out] - указатель на лист
*   @param erased_data [out] - указатель, по которому скопировать содержимое удаляемой вершины (nullptr по умолчанию)
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_pop_back(list *const lst, void *const erased_data = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------
// list get
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Показывает содержимое элемента листа.
*
*   @param lst [in] - указатель на лист
*   @param pos [in] - порядковый номер элемента
*
*   @return указатель на содержимое вершины, если все ОК, nullptr в случае ошибки
*/
void *list_get(const list *const lst, const size_t pos);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Показывает содержимое первого элемента листа.
*
*   @param lst [in] - указатель на лист
*
*   @return указатель на содержимое вершины, если все ОК, nullptr в случае ошибки
*/
void *list_front(const list *const lst);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Показывает содержимое последнего элемента листа.
*
*   @param lst  [in]  - указатель на лист
*   @param data [out] - указатель, куда скопировать содержимое элемента
*
*   @return указатель на содержимое вершины, если все ОК, nullptr в случае ошибки
*/
void *list_back(const list *const lst);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Возвращает указатель на следующий элемент листа.
*   Считается, что пользователь гарантирует, что указатель валиден. Выход за границу листа не проверяется. 
*
*   @param lst    [in] - указатель на лист
*   @param cur_el [in] - указатель на текущий элемент листа
*
*   @return указатель на следующий элемент листа
*/
void *list_next(const list *const lst, const void *cur_el);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Ищет элемент в листе.
*
*   @param lst      [in] - указатель на лист
*   @param target   [in] - указатель на элемент, который нужно найти
*   @param elem_cmp [in] - указатель на функцию сравнения элементов, которая возвращает 0, если элементы равны
*
*   @return указатель на первое вхождение найденного элемента или nullptr, если его в листе нет.
*/
void *list_find(const list *const lst, const void *const target, int (*el_cmp)(const void *el_1, const void *el_2));

//--------------------------------------------------------------------------------------------------------------------------------
// dump
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп листа.
*
*   @param lst [in] - указатель на лист
*/
void list_dump(const void *const _lst);

//================================================================================================================================
// MACRO
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// list verify
//--------------------------------------------------------------------------------------------------------------------------------

#if !defined(NVERIFY) && !defined(LIST_NVERIFY)
#define lst_verify(lst, ret_val)                                                                                    \
    if (_list_verify(lst) != 0)                                                                                     \
    {                                                                                                               \
    $o  return ret_val;                                                                                             \
    }
#else
#define lst_verify(lst, ret_val)
#endif

#if !defined(NDEBUG) && !defined(LIST_NDEBUG)
#define lst_debug_verify(lst)                                                                                       \
        log_assert(_list_verify(lst) == 0)
#else
#define lst_debug_verify(lst)
#endif

#endif //LIST_H