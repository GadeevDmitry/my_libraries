/** @file */
#ifndef LIST_H
#define LIST_H

#include <stdlib.h>

#include "../logs/log.h"
#include "../algorithm/algorithm.h"

//================================================================================================================================
// STRUCT
//================================================================================================================================

/**
*   @brief Вершина листа.
*/
struct list_node
{
    const void *data;    ///< указатель на элемент листа
    list_node  *prev;    ///< указатель на предыдущую вершину листа
    list_node  *next;    ///< указатель на следующую вершину листа
};

/**
*   @brief Структура данных лист.
*/
struct list
{
    list_node *fictional;                   ///< указатель на фиктивную вершину листа

    size_t size;                            ///< количество элементов в листе

    void (*el_dump) (const void *const);    ///< указатель на dump элемента листа
};

//================================================================================================================================
// FUNCTION DECLARATION
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// ctor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief List_ctor.
*
*   @param lst     [out] - указатель на лист
*   @param el_dump [in]  - указатель на dump элемента листа
*/
bool list_ctor(list *const lst, void (*el_dump) (const void *const) = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Создает лист в динамической памяти.
*
*   @param el_dump [in] - указатель на dump элемента листа
*
*   @return указатель на созданный лист или nullptr в случае ошибки
*/
list *list_new(void (*el_dump) (const void *const) = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------
// dtor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief List_dtor.
*
*   @param _lst [in] - указатель на лист
*/
void list_dtor(void *const _lst);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Вызывает list_dtor(void* _lst) и освобождает динамическую память, на которую должен указывать лист.
*
*   @see list_dtor(void* _lst)
*/
void list_free(void *const _lst);

//--------------------------------------------------------------------------------------------------------------------------------
// insert erase
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Добавляет элемент в лист.
*
*   @param lst   [in, out] - указатель на лист
*   @param data  [in]      - указатель на элемент
*   @param index [in]      - порядковый номер, на который поставить элемент
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_insert(list *const lst, const void *const data, const size_t index);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Добавляет элемент в начало листа.
*
*   @param lst  [in, out] - указатель на лист
*   @param data [in]      - указатель на элемент
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_push_front(list *const lst, const void *const data);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Добавляет элемент в конец листа.
*
*   @param lst  [in, out] - указатель на лист
*   @param data [in]      - указатель на элемент
*
*   @return true, если все ОК, false в случае ошибки
*/
bool list_push_back(list *const lst, const void *const data);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Удаляет элемент из листа.
*
*   @param lst   [in, out] - указатель на лист
*   @param index [in]      - порядковый номер удаляемого элемента
*
*   @return указатель на содержимое удаляемой вершины, если все ОК, nullptr в случае ошибки
*/
void *list_erase(list *const lst, const size_t index);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Удаляет элемент из начала листа.
*
*   @param lst [in, out] - указатель на лист
*
*   @return указатель на содержимое удаляемой вершины, если все ОК, nullptr в случае ошибки
*/
void *list_pop_front(list *const lst);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Удаляет элемент из конца листа.
*
*   @param lst [in, out] - указатель на лист
*
*   @return указатель на содержимое удаляемой вершины, если все ОК, nullptr в случае ошибки
*/
void *list_pop_back(list *const lst);

//--------------------------------------------------------------------------------------------------------------------------------
// list get
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Показывает содержимое элемента листа.
*
*   @param lst   [in]  - указатель на лист
*   @param index [in]  - порядковый номер элемента
*
*   @return указатель на содержимое вершины, если все ОК, nullptr в случае ошибки
*/
void *list_get(const list *const lst, const size_t index);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Показывает содержимое первого элемента листа.
*
*   @param lst  [in]  - указатель на лист
*
*   @return указатель на содержимое вершины, если все ОК, nullptr в случае ошибки
*/
void *list_front(const list *const lst);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Показывает содержимое последнего элемента листа.
*
*   @param lst  [in]  - указатель на лист
*   @param data [out] - указатель, куда скопировать содержимое элемента
*
*   @return указатель на содержимое вершины, если все ОК, nullptr в случае ошибки
*/
void *list_back(const list *const lst);

//--------------------------------------------------------------------------------------------------------------------------------
// dump
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп листа.
*
*   @param lst [in] - указатель на лист
*/
void list_dump(const void *const _lst);

#endif //LIST_H