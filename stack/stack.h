/** @file */
#ifndef STACK_H
#define STACK_H

#include "stack_settings.h"

//================================================================================================================================
// STRUCT
//================================================================================================================================

/**
*   @brief Структура данных стек
*/
struct stack
{
    void  *data;            ///< указатель на начало массива с элементами стека

    size_t  el_size;        ///< размер элемента стека (в байтах)
    size_t     size;        ///< размер стека (количество элементов в стеке)
    size_t capacity;        ///< емкость стека (максимальное количество элементов, которое может храниться в стеке)

    const void *el_poison;  ///< указатель на POISON-элемент стека

    void (*el_dtor)      (      void *const el);    ///< указатель на dtor элемента стека
    void (*el_dump)      (const void *const el);    ///< указатель на dump элемента стека
};

//================================================================================================================================
// FUNCTION DECLARATION
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// ctor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief stack ctor
*/
bool stack_ctor(stack *const stk, const size_t el_size, const void *const el_poison                     = nullptr,
                                                              void (     *el_dtor  )(      void *const) = nullptr,
                                                              void (     *el_dump  )(const void *const) = nullptr);

/**
*   @brief Создает стек в динамической памяти
*/
stack *stack_new(const size_t el_size, const void *const el_poison                   = nullptr,
                                           void (     *el_dtor  )(      void *const) = nullptr,
                                           void (     *el_dump  )(const void *const) = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------
// dtor
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Stack dtor
*/
void stack_dtor(void *const _stk);

//--------------------------------------------------------------------------------------------------------------------------------
// push pop
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Stack push
*
*   @param stk  [in] - стек
*   @param data [in] - указатель на элемент стека, который нужно запушить
*/
bool stack_push(stack *const stk, const void *const data);

/**
*   @brief Stack pop
*
*   @param stk  [in]  - стек
*   @param data [out] - указатель, по которому скопировать содержимое вершины стека перед удалением
*/
bool stack_pop(stack *const stk, void *const data = nullptr);

//--------------------------------------------------------------------------------------------------------------------------------
// other
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Копирует вершину стека по указателю
*
*   @param stk  [in]  - стек
*   @param data [out] - указатель, по которому скопировать содержимое вершины стека
*/
bool stack_front(const stack *const stk, void *const data);

/**
*   @brief Проверяет, пустой ли стек
*/
bool stack_is_empty(const stack *const stk);

/**
*   @brief Дамп стека
*/
void stack_dump(const void *const stk);

#endif //STACK_H