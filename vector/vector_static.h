/** @file */
#ifndef VECTOR_STATIC_H
#define VECTOR_STATIC_H

#include "../stack/stack_static.h"
#include "../algorithm/algorithm.h"
#include "vector.h"

//================================================================================================================================
// DSL
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// VECTOR
//--------------------------------------------------------------------------------------------------------------------------------

#undef  $data
#define $data           (vec->data)

#undef  $el_size
#undef  $size
#undef  $capacity
#define $el_size        (vec->el_size)
#define $size           (vec->size)
#define $capacity       (vec->capacity)

#undef  $el_poison
#define $el_poison      (vec->el_poison)

#undef  $el_dtor
#undef  $el_dump
#define $el_dtor        (vec->el_dtor)
#define $el_dump        (vec->el_dump)

//================================================================================================================================
// FUNCTION DECLARATION
//================================================================================================================================

//--------------------------------------------------------------------------------------------------------------------------------
// dump
//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп вектора.
*
*   @param vec     [in] - указатель на вектор
*   @param is_full [in] - true, если нужен дамп "static" полей
*/
static void vector_static_dump(const vector *const vec, const bool is_full);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief "Шапка" дампа вектора.
*
*   @return true, если vec != nullptr
*/
static __always_inline bool vector_header_dump(const vector *const vec);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп "public" полей вектора.
*
*   @return true, если хоть одно поле невалидно
*/
static bool vector_public_fields_dump(const vector *const vec);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп "static" полей вектора.
*
*   @return true, если хоть одно поле невалидно
*/
static bool vector_static_fields_dump(const vector *const vec);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief Дамп содержимого поля .data вектора.
*
*   @param is_full        [in] - true, если нужен дамп "static" полей
*   @param is_any_invalid [in] - true, если хоть одно поле невалидно
*/
static void vector_data_dump(const vector *const vec, const bool is_full,
                                                      const bool is_any_invalid);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief "Public" дамп поля .data вектора.
*   Дамп только пользовательских ячеек.
*/
static void vector_data_public_dump(const vector *const vec);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief "Static" дамп поля .data вектора.
*   Дамп пользовательских ячеек стека + проверка на ядовитость свободных ячеек (сообщение об ошибке в ячейке в случае провала).
*/
static void vector_data_static_dump(const vector *const vec);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief "Static" дамп пользовательских ячеек стека.
*/
static void vector_data_static_busy_dump(const vector *const vec);

//--------------------------------------------------------------------------------------------------------------------------------

/**
*   @brief "Static" дамп свободных ячеек стека.
*/
static void vector_data_static_free_dump(const vector *const vec);

#endif // VECTOR_STATIC_H
